/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Determines how many items, will be selected.
 */
export type Rolls =
  | number
  | {
      min: Minimum;
      max: Maximum;
      [k: string]: unknown;
    };
/**
 * The minimum amount.
 */
export type Minimum = number;
/**
 * The maximum amount.
 */
export type Maximum = number;
/**
 * Whenever this pool item is an item or another table.
 */
export type Type = "loot_table" | "item" | "empty";
/**
 * A minecraft loot table condition.
 */
export type Condition = {
  [k: string]: unknown;
};
/**
 * Possible conditions that need to have been met before selecting this item.
 */
export type Conditions = Condition[];
/**
 * UNDOCUMENTED.
 */
export type Type1 = "item" | "empty" | "loot_table";
/**
 * The amount of the item.
 */
export type Count = number;
/**
 * An item or loottable.
 */
export type Name = string;
/**
 * UNDOCUMENTED.
 */
export type Weight = number;
/**
 * UNDOCUMENTED.
 */
export type Function = {
  [k: string]: unknown;
};
/**
 * UNDOCUMENTED.
 */
export type Functions = Function[];
/**
 * A collection of items where the system will choice one or more from.
 */
export type Pools1 = ASinglePool[];
/**
 * UNDOCUMENTED.
 */
export type Quality = number;
/**
 * The items specifiation of this pool.
 */
export type Entries = Entry[];
/**
 * UNDOCUMENTED.
 */
export type BonusChance = number;
/**
 * UNDOCUMENTED.
 */
export type BonusRolls = number;
/**
 * UNDOCUMENTED.
 */
export type InitialRange = number;
/**
 * UNDOCUMENTED.
 */
export type BonusRolls1 = number;
/**
 * UNDOCUMENTED.
 */
export type Pools = ASinglePool[];
/**
 * UNDOCUMENTED.
 */
export type Type2 = "minecraft:chest";

/**
 * A minecraft loot table.
 */
export interface LootTable {
  pools?: Pools;
  type?: Type2;
}
export interface ASinglePool {
  rolls?: Rolls;
  type?: Type;
  conditions?: Conditions;
  entries?: Entries;
  tiers?: Tiers;
  bonus_rolls?: BonusRolls1;
}
/**
 * UNDOCUMENTED.
 */
export interface Entry {
  type: Type1;
  count?: Count;
  name?: Name;
  weight?: Weight;
  functions?: Functions;
  pools?: Pools1;
  quality?: Quality;
}
/**
 * UNDOCUMENTED.
 */
export interface Tiers {
  bonus_chance?: BonusChance;
  bonus_rolls?: BonusRolls;
  initial_range?: InitialRange;
}
