/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A version that tells minecraft what type of data format can be expected when reading this file.
 */
export type FormatVersion = string;
export type Give =
  | string
  | {
      item?: ItemIdentifier;
      quantity?: Quantity;
      functions?: Functions;
      choice?: Choice;
    };
export type ItemIdentifier = string;
export type Quantity =
  | Amount
  | {
      min: Minimum;
      max: Maximum;
    };
export type Amount = number;
export type Minimum = number;
export type Maximum = number;
/**
 * A minecraft loot table condition.
 */
export type Functions1 = {
  [k: string]: unknown;
};
export type Functions = Functions1[];
export type Item =
  | string
  | {
      item?: ItemIdentifier1;
      price_multiplier?: PriceMultiplier;
      functions?: Functions;
      biomes?: Biomes;
      quantity?: Quantity1;
    };
export type ItemIdentifier1 = string;
export type PriceMultiplier = number;
/**
 * An in game biome
 */
export type Biome =
  | "bamboo_jungle"
  | "bamboo_jungle_hills"
  | "basalt_deltas"
  | "beach"
  | "birch_forest"
  | "birch_forest_hills"
  | "birch_forest_hills_mutated"
  | "birch_forest_mutated"
  | "cherry_grove"
  | "cold_beach"
  | "cold_ocean"
  | "cold_taiga"
  | "cold_taiga_hills"
  | "cold_taiga_mutated"
  | "crimson_forest"
  | "deep_cold_ocean"
  | "deep_frozen_ocean"
  | "deep_lukewarm_ocean"
  | "deep_ocean"
  | "deep_warm_ocean"
  | "deep_dark"
  | "desert"
  | "desert_hills"
  | "desert_mutated"
  | "dripstone_caves"
  | "extreme_hills"
  | "extreme_hills_edge"
  | "extreme_hills_mutated"
  | "extreme_hills_plus_trees"
  | "extreme_hills_plus_trees_mutated"
  | "flower_forest"
  | "forest"
  | "forest_hills"
  | "frozen_ocean"
  | "frozen_peaks"
  | "frozen_river"
  | "grove"
  | "hell"
  | "ice_mountains"
  | "ice_plains"
  | "ice_plains_spikes"
  | "jagged_peaks"
  | "jungle"
  | "jungle_edge"
  | "jungle_edge_mutated"
  | "jungle_hills"
  | "jungle_mutated"
  | "legacy_frozen_ocean"
  | "lukewarm_ocean"
  | "lush_caves"
  | "mangrove_swamp"
  | "meadow"
  | "mega_taiga"
  | "mega_taiga_hills"
  | "mesa"
  | "mesa_bryce"
  | "mesa_plateau"
  | "mesa_plateau_mutated"
  | "mesa_plateau_stone"
  | "mesa_plateau_stone_mutated"
  | "mushroom_island"
  | "mushroom_island_shore"
  | "ocean"
  | "plains"
  | "redwood_taiga_hills_mutated"
  | "redwood_taiga_mutated"
  | "river"
  | "roofed_forest"
  | "roofed_forest_mutated"
  | "savanna"
  | "savanna_mutated"
  | "savanna_plateau"
  | "savanna_plateau_mutated"
  | "snowy_slopes"
  | "soulsand_valley"
  | "stone_beach"
  | "stony_peaks"
  | "sunflower_plains"
  | "swampland"
  | "swampland_mutated"
  | "taiga"
  | "taiga_hills"
  | "taiga_mutated"
  | "the_end"
  | "warm_ocean"
  | "warped_forest";
/**
 * UNDOCUMENTED.
 */
export type Biomes = Biome[];
export type Quantity1 =
  | Amount1
  | {
      min: Minimum1;
      max: Maximum1;
    };
export type Amount1 = number;
export type Minimum1 = number;
export type Maximum1 = number;
/**
 * UNDOCUMENTED.
 */
export type Choice = Item[];
export type Gives = Give[];
export type Want =
  | string
  | {
      item?: ItemIdentifier2;
      quantity?: Quantity2;
      price_multiplier?: PriceMultiplier1;
      functions?: Functions;
      choice?: Choice1;
    };
export type ItemIdentifier2 = string;
export type Quantity2 =
  | Amount2
  | {
      min: Minimum2;
      max: Maximum2;
    };
export type Amount2 = number;
export type Minimum2 = number;
export type Maximum2 = number;
/**
 * UNDOCUMENTED.
 */
export type PriceMultiplier1 = number;
/**
 * UNDOCUMENTED.
 */
export type Choice1 = Item[];
export type Wants = Want[];
export type TraderExperience = number;
export type MaximumUses = number;
export type Weight = number;
export type RewardExperience = boolean;
export type Trades = Trade[];
export type TotalExperienceRequired = number;
export type NumberToSelect = number;
/**
 * A collection of groups.
 */
export type Groups = Group[];
/**
 * A collection of tiers.
 */
export type Tiers = Tier[];

/**
 * UNDOCUMENTED.
 */
export interface Trading {
  format_version?: FormatVersion;
  tiers?: Tiers;
}
export interface Tier {
  trades?: Trades;
  total_exp_required: TotalExperienceRequired;
  groups: Groups;
}
export interface Trade {
  gives: Gives;
  wants: Wants;
  trader_exp?: TraderExperience;
  max_uses?: MaximumUses;
  weight?: Weight;
  reward_exp?: RewardExperience;
}
export interface Group {
  num_to_select?: NumberToSelect;
  trades?: Trades;
}
