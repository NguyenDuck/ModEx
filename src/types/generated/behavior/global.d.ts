/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A version that tells minecraft what type of data format can be expected when reading this file.
 */
export type FormatVersion = string;
/**
 * How bright the sun is, measured in lux (lx)
 */
export type Illuminance = number;
/**
 * The RGB color that the sun contributes to direct surface lighting; supports RGB array or HEX string
 */
export type Color = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];
export type Red = number;
export type Blue = number;
export type Green = number;
/**
 * How bright the moon is, measured in lux (lx)
 */
export type Illuminance1 = number;
/**
 * The RGB color that the moon contributes to direct surface lighting; supports RGB array or HEX string
 */
export type Color1 = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];
/**
 * The rotational offset of the sun and moon from their standard orbital axis; measured in degrees
 */
export type OrbitalOffsetDegrees = number;
/**
 * The color of the light emitted by the block, in RGB format or hex format.
 */
export type LightingColor = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];
/**
 * The color of the light emitted by the block, in RGB format or hex format.
 */
export type LightingColor1 = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];
/**
 * The color of the light emitted by the block, in RGB format or hex format.
 */
export type LightingColor2 = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];
/**
 * The color of the light emitted by the block, in RGB format or hex format.
 */
export type LightingColor3 = string | [] | [Red] | [Red, Blue] | [Red, Blue, Green];

export interface BlockceptionMinecraftBehaviorLightingGlobal {
  format_version?: FormatVersion;
  directional_lights?: DirectionalLights;
}
/**
 * The directional lights that affect the world
 */
export interface DirectionalLights {
  sun?: Sun;
  moon?: Moon;
  orbital_offset_degrees?: OrbitalOffsetDegrees;
  point_lights?: PointLights;
  pbr?: PBR;
}
/**
 * The sun directional light
 */
export interface Sun {
  illuminance?: Illuminance;
  color?: Color;
}
/**
 * The moon directional light
 */
export interface Moon {
  illuminance?: Illuminance1;
  color?: Color1;
}
/**
 * The point lights that affect the world
 */
export interface PointLights {
  colors?: Colors;
}
/**
 * List of key-value pairs where the key is a namespace-qualified block name and the value is a color
 */
export interface Colors {
  [k: string]: LightingColor;
}
/**
 * The physically-based rendering properties for the world
 */
export interface PBR {
  blocks?: Blocks;
  actors?: Actors;
  particles?: Particles;
}
/**
 * The PBR properties for blocks
 */
export interface Blocks {
  color?: LightingColor1;
}
/**
 * The PBR properties for actors
 */
export interface Actors {
  color?: LightingColor2;
}
/**
 * The PBR properties for particles
 */
export interface Particles {
  color?: LightingColor3;
}
