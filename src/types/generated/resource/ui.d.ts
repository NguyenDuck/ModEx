/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Namespace = string;
export type UIDefinition = Element | Animation | ControlFactory;
/**
 * The controls that are contained within this element.
 */
export type Controls =
  | {
      [k: string]: SubElement;
    }[]
  | C;
export type SubElement = Element | Animation | ControlFactory;
/**
 * The type of the animation.
 */
export type AnimationType =
  | ("wait" | "offset" | "alpha" | "flip_book" | "aseprite_flip_book" | "clip" | "color" | "size" | "uv")
  | C;
export type C = ElementReference | ElementReference1 | VariableReference;
/**
 * A reference to an element: using the following syntax: [element_name]@[namespace_reference].[element_name_reference]
 */
export type ElementReference = string;
/**
 * A reference to an element: using the following syntax: [namespace_reference].[element_name_reference]
 */
export type ElementReference1 = string;
/**
 * A variable is a reference to a value that can be used in the UI.
 */
export type VariableReference = {
  [k: string]: unknown;
} & string;
/**
 * The name of the animation that will be reset.
 */
export type AnimationResetName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be destroyed at the end of the animation.
 */
export type DestroyAtEnd =
  | ("popup" | "details_bubble_control" | "bundle_mode_popup_control" | "selected_item_details")
  | Variable;
/**
 * A variable is a reference to a value that can be used in the UI.
 */
export type Variable = G & G1;
export type G = string;
export type G1 = string;
/**
 * If true, the animation will not be fast forwarded.
 */
export type DisableAnimFastForward = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The duration of the animation.
 */
export type Duration = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The easing of the animation.
 */
export type Easing =
  | (
      | "linear"
      | "spring"
      | "in_quad"
      | "out_quad"
      | "in_out_quad"
      | "in_cubic"
      | "out_cubic"
      | "in_out_cubic"
      | "in_quart"
      | "out_quart"
      | "in_out_quart"
      | "in_quint"
      | "out_quint"
      | "in_out_quint"
      | "in_sine"
      | "out_sine"
      | "in_out_sine"
      | "in_expo"
      | "out_expo"
      | "in_out_expo"
      | "in_circ"
      | "out_circ"
      | "in_out_circ"
      | "in_bounce"
      | "out_bounce"
      | "in_out_bounce"
      | "in_back"
      | "out_back"
      | "in_out_back"
      | "in_elastic"
      | "out_elastic"
      | "in_out_elastic"
    )
  | C;
/**
 * The event that will be triggered when the animation ends.
 */
export type EndEvent = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The FPS of the animation.
 */
export type FPS = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The number of frames in the animation.
 */
export type FrameCount = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The step of the frame.
 */
export type FrameStep = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The starting point of the animation.
 */
export type From = number | BI;
export type BI = ((ElementReference | ElementReference1 | VariableReference) & string) | [] | [Width] | [Width, Height];
/**
 * A variable
 */
export type Width = (("default" | "fill") | string | number) & string;
/**
 * A variable
 */
export type Height = (("default" | "fill") | string | number) & string;
/**
 * The initial UV of the animation.
 */
export type InitialUV =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width]
  | [Width, Height];
/**
 * The name of the next element.
 */
export type Next = ElementReference | ElementReference1 | VariableReference;
/**
 * The event that will be played.
 */
export type PlayEvent = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, this element will apply the same alpha value to its controlled element(s).
 */
export type PropagateAlpha = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the animation will be reversible.
 */
export type Reversible = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the animation will scale from the starting alpha.
 */
export type ScaleFromStartingAlpha = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The ending point of the animation.
 */
export type To = number | BI;
/**
 * The UV of the animation.
 */
export type UV = ((ElementReference | ElementReference1 | VariableReference) & string) | [] | [Width] | [Width, Height];
/**
 * The size of the UV.
 */
export type UVSize =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width]
  | [Width, Height];
/**
 * The type of the element
 */
export type Type = "factory";
/**
 * The IDs of the controls that will be created by the factory.
 */
export type ControlIDs =
  | string
  | {
      [k: string]: ControlID;
    };
export type ControlID = string;
/**
 * The name of the control.
 */
export type ControlName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
export type ControlName1 = string;
export type ArrayName = "bindings" | "controls";
export type Operation =
  | "insert_back"
  | "insert_front"
  | "insert_after"
  | "insert_before"
  | "move_back"
  | "move_front"
  | "move_after"
  | "move_before"
  | "swap"
  | "remove"
  | "replace";
/**
 * The bindings that are contained within this element.
 */
export type Bindings = C | Bindings1[];
/**
 * The name of the collection that the binding is in.
 */
export type BindingCollectionName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The prefix of the collection that the binding is in.
 */
export type BindingCollectionPrefix = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The condition that must be met for the binding to be applied.
 */
export type BindingCondition = ("once" | "always" | "always_when_visible" | "visible") | C;
/**
 * The name of the binding. This is used to reference the binding in the element's properties.
 */
export type BindingName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the binding. This is used to reference the binding in the element's properties.
 */
export type BindingNameOverride = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The type of the binding.
 */
export type BindingType = ("collection" | "global" | "collection_details" | "none" | "view") | Variable;
/**
 * If true, the binding will be ignored.
 */
export type Ignored = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the binding will resolve sibling scope.
 */
export type ResolveSiblingScope = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the control that the binding is in.
 */
export type SourceControlName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the property that the binding is in.
 */
export type SourcePropertyName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the property that the binding is in.
 */
export type TargetPropertyName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The controls to add.
 */
export type Controls1 =
  | {
      [k: string]: SubElement1;
    }[]
  | C;
export type SubElement1 = Element | Animation | ControlFactory;
/**
 * Modifications to the element.
 */
export type Modifications = {
  control_name?: ControlName1;
  array_name?: ArrayName;
  operation?: Operation;
  where?: Bindings;
  target?: Bindings;
  target_control?: string;
  value?: Bindings | Controls1;
  [k: string]: unknown;
}[];
/**
 * If true, the element will allow clipping.
 */
export type AllowClipping = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will show the black and purple placeholder texture if the referenced image is not found.
 */
export type AllowDebugMissingTexture = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will allow scrolling even when the content fits.
 */
export type AllowScrollEvenWhenContentFits =
  | boolean
  | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The alpha of the element.
 */
export type Alpha = C | number;
/**
 * If true, the element will always handle the pointer.
 */
export type AlwaysHandlePointer = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will always handle scrolling.
 */
export type AlwaysHandleScrolling = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will always listen to input.
 */
export type AlwaysListenToInput = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will always rotate.
 */
export type AlwaysRotate = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The anchor point of the element. This is the point that the element will be positioned relative to.
 */
export type AnchorFrom = Anchor | Variable;
/**
 * An anchor is a reference to an element in the UI.
 */
export type Anchor =
  | "bottom"
  | "bottom_left"
  | "bottom_right"
  | "bottom_middle"
  | "center"
  | "left"
  | "left_middle"
  | "right"
  | "right_middle"
  | "top"
  | "top_left"
  | "top_right"
  | "top_middle";
/**
 * The anchor point of the element. This is the point that the element will be positioned relative to.
 */
export type AnchorTo = Anchor | Variable;
/**
 * The animations that are contained within this element.
 */
export type Animations = C | C[];
/**
 * The control that will be used for the background.
 */
export type BackgroundControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be used for the background when hovered.
 */
export type BackgroundHoverControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The type of the backup font.
 */
export type BackupFontType = "UIFont" | C;
/**
 * If true, the element will use bilinear filtering.
 */
export type Bilinear = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button mappings that are contained within this element.
 */
export type ButtonMappings = C | ButtonMappings1[];
export type ButtonMapping = string | boolean;
/**
 * If true, the screen will be cached.
 */
export type CacheScreen = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be checked.
 */
export type CheckedControl = "checked" | C;
/**
 * The control that will be checked when hovered.
 */
export type CheckedHoverControl = "checked" | C;
/**
 * The control that will be checked when locked.
 */
export type CheckedLockedControl = "checked" | C;
/**
 * The control that will be checked when locked and hovered.
 */
export type CheckedLockedHoverControl = "checked" | C;
/**
 * The direction that the element will be clipped in.
 */
export type ClipDirection = ("left" | "right" | "top" | "bottom") | C;
/**
 * If true, the element will be clipped pixel perfect.
 */
export type ClipPixelPerfect = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will clip its children.
 */
export type ClipsChildren = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will close when the player is hurt.
 */
export type CloseOnPlayerHurt = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The index of the collection that the element is in.
 */
export type CollectionIndex = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the collection that the element is in.
 */
export type CollectionName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The color of the text. This can be a hex color code or a color keyword.
 */
export type Color =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Red]
  | [Red, Green]
  | [Red, Green, Blue];
/**
 * A variable
 */
export type Red = string;
/**
 * A variable
 */
export type Green = string;
/**
 * A variable
 */
export type Blue = string;
/**
 * If true, the element will consume hover events.
 */
export type ConsumeHoverEvents = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be contained.
 */
export type Contained = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The default control that will be focused.
 */
export type DefaultControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The default focus precedence of the element.
 */
export type DefaultFocusPrecedence = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be draggable.
 */
export type Draggable = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The area that the dropdown will be in.
 */
export type DropdownArea =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [X]
  | [X, Y]
  | [X, Y, Width1]
  | [X, Y, Width1, Height1];
/**
 * A variable
 */
export type X = ("default" | "fill") | string | number;
/**
 * A variable
 */
export type Y = ("default" | "fill") | string | number;
/**
 * A variable
 */
export type Width1 = ("default" | "fill") | string | number;
/**
 * A variable
 */
export type Height1 = ("default" | "fill") | string | number;
/**
 * The control that will be used for the dropdown content.
 */
export type DropdownContentControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the dropdown.
 */
export type DropdownName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will enable directional toggling.
 */
export type EnableDirectionalToggling = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will enable the profanity filter.
 */
export type EnableProfanityFilter = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be enabled when a new line is created.
 */
export type EnabledNewline = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be enabled.
 */
export type Enabled = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The factory that will be used to create the element.
 */
export type Factory =
  | {
      control_ids?: ControlIDs;
      control_name?: ControlName2;
      factory_variables?: FactoryVariables;
      name?: Name;
      [k: string]: VariableDefinition;
    }
  | C;
/**
 * The name of the control that will be created by the factory.
 */
export type ControlName2 = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The variables that will be used by the factory.
 */
export type FactoryVariables = FactoryVariable[] | string;
export type FactoryVariable = string;
/**
 * The name of the factory.
 */
export type Name = string;
/**
 * If true, the element will fill the screen.
 */
export type Fill = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
export type FocusChangeDown = "FOCUS_OVERRIDE_STOP" | C;
export type FocusChangeLeft = "FOCUS_OVERRIDE_STOP" | C;
export type FocusChangeRight = "FOCUS_OVERRIDE_STOP" | C;
export type FocusChangeUp = "FOCUS_OVERRIDE_STOP" | C;
/**
 * If true, the element will be a focus container.
 */
export type FocusContainer = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be focus enabled.
 */
export type FocusEnabled = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The identifier of the element that will be focused.
 */
export type FocusIdentifier = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be focus magnet enabled.
 */
export type FocusMagnetEnabled = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The focus navigation mode that will be used when navigating down.
 */
export type FocusNavigationModeDown = NavigationMode | C;
/**
 * The navigation mode of the UI.
 */
export type NavigationMode = "contained" | "stop";
/**
 * The focus navigation mode that will be used when navigating left.
 */
export type FocusNavigationModeLeft = NavigationMode | C;
/**
 * The focus navigation mode that will be used when navigating right.
 */
export type FocusNavigationModeRight = NavigationMode | C;
/**
 * The focus navigation mode that will be used when navigating up.
 */
export type FocusNavigationModeUp = NavigationMode | C;
/**
 * If true, the element will be focus wrap enabled.
 */
export type FocusWrapEnabled = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The scale factor of the font.
 */
export type FontScaleFactor = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The size of the font.
 */
export type FontSize = "normal" | C;
/**
 * The type of the font.
 */
export type FontType = ("smooth" | "MinecraftTen" | "MinecraftTenEmoticon") | Variable;
/**
 * If true, the element will be rendered below the screen.
 */
export type ForceRenderBelow = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the texture will be reloaded.
 */
export type ForceTextureReload = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The binding that will be used for the grid dimension.
 */
export type GridDimensionBinding = string;
/**
 * The dimensions of the grid.
 */
export type GridDimensions =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width]
  | [Width, Height];
/**
 * The template that will be used for the grid item.
 */
export type GridItemTemplate = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The position of the grid.
 */
export type GridPosition =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width]
  | [Width, Height];
/**
 * The type of the grid rescaling.
 */
export type GridRescalingType = "horizontal" | C;
/**
 * If true, the element will handle deselect.
 */
export type HandleDeselect = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will handle select.
 */
export type HandleSelect = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will hide the hyphen.
 */
export type HideHyphen = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be hovered.
 */
export type HoverControl = "hover" | C;
/**
 * If true, the element will be hover enabled.
 */
export type HoverEnabled = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be ignored.
 */
export type Ignored1 = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The images that are contained within this element.
 */
export type Images = C | C[];
/**
 * The control that will be indented.
 */
export type IndentControl = "indent" | C;
/**
 * If true, the element will inherit the maximum height of its siblings.
 */
export type InheritMaxSiblingHeight = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will inherit the maximum width of its siblings.
 */
export type InheritMaxSiblingWidth = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be modal.
 */
export type IsModal = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be showing the menu.
 */
export type IsShowingMenu = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will jump to the bottom when updated.
 */
export type JumpToBottomOnUpdate = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will keep its ratio.
 */
export type KeepRatio = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The layer that the element will be rendered in. Higher layers are rendered on top of lower layers.
 */
export type Layer = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be localized.
 */
export type Localize = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be locked.
 */
export type LockedControl = ("locked" | "") | C;
/**
 * If true, the element will be rendered at a lower frequency.
 */
export type LowFrequencyRendering = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The maximum length of the text. If the text is longer than this, it will be truncated.
 */
export type MaxLength = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The maximum size of the element.
 */
export type MaxSize =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width2]
  | [Width2, Height2];
/**
 * A variable
 */
export type Width2 = (("default" | "fill") | string | number) & string;
/**
 * A variable
 */
export type Height2 = (("default" | "fill") | string | number) & string;
/**
 * The maximum number of grid items.
 */
export type MaximumGridItems = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The minimum size of the element.
 */
export type MinSize =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width2]
  | [Width2, Height2];
/**
 * If true, the element will be modal.
 */
export type Modal = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The offset of the element from the anchor point. horizontal by vertical.
 */
export type Offset =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width]
  | [Width, Height];
/**
 * The orientation of the element.
 */
export type Orientation = ("horizontal" | "vertical") | C;
/**
 * The control that will be used for the place holder.
 */
export type PlaceHolderControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be pressed.
 */
export type PressedControl = ("hover" | "pressed") | C;
/**
 * If true, touch input will be prevented from passing through this element.
 */
export type PreventTouchInput = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be used for the progress.
 */
export type ProgressControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be used for the progress when hovered.
 */
export type ProgressHoverControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The property bag that will be used by the element.
 */
export type PropertyBag =
  | {
      [k: string]: PropertyBagProperty;
    }
  | String;
/**
 * An any value.
 */
export type PropertyBagProperty =
  | unknown[]
  | boolean
  | number
  | {
      [k: string]: unknown;
    }
  | string;
/**
 * A string value.
 */
export type String = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The radio toggle group that the element is in.
 */
export type RadioToggleGroup = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the game will be rendered behind the element.
 */
export type RenderGameBehind = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will only be rendered when it is the topmost element.
 */
export type RenderOnlyWhenTopmost = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The renderer that will be used by the element.
 */
export type Renderer = "ui_holo_cursor" | C;
/**
 * The event that will be reset.
 */
export type ResetEvent = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be reset when focus is lost.
 */
export type ResetOnFocusLost = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The speed that the element will rotate at.
 */
export type RotateSpeed = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the screen will be drawn last.
 */
export type ScreenDrawsLast = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the screen will not be flushed when the element is added.
 */
export type ScreenNotFlushable = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The panel that will be used for the scroll box and track.
 */
export type ScrollBoxAndTrackPanel = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The content that will be scrolled.
 */
export type ScrollContent = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The speed that the element will scroll at.
 */
export type ScrollSpeed = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The view port that the element will be scrolled in.
 */
export type ScrollViewPort = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The box of the scrollbar.
 */
export type ScrollbarBox = "box" | C;
/**
 * The button that will be used for the scrollbar touch.
 */
export type ScrollbarTouchButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The button that will be used for the scrollbar track.
 */
export type ScrollbarTrackButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The track of the scrollbar.
 */
export type ScrollbarTrack = "track" | C;
/**
 * If true, the element will send telemetry.
 */
export type SendTelemetry = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the text will have a shadow.
 */
export type Shadow = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will steal the mouse.
 */
export type ShouldStealMouse = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The size of the element.
 */
export type Size =
  | ((ElementReference | ElementReference1 | VariableReference) & string)
  | []
  | [Width2]
  | [Width2, Height2];
/**
 * The control that will be used for the slider box.
 */
export type SliderBoxControl = "slider_box" | C;
/**
 * The name of the collection that the slider is in.
 */
export type SliderCollectionName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button that will be used for the slider deselected.
 */
export type SliderDeselectedButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The direction of the slider.
 */
export type SliderDirection = ElementReference | ElementReference1 | VariableReference;
/**
 * The name of the slider.
 */
export type SliderName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the slider will select on hover.
 */
export type SliderSelectOnHover = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button that will be used for the slider selected.
 */
export type SliderSelectedButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The button that will be used for the slider small decrease.
 */
export type SliderSmallDecreaseButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The button that will be used for the slider small decrease.
 */
export type SliderSmallIncreaseButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The steps of the slider.
 */
export type SliderSteps = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button that will be used for the slider track.
 */
export type SliderTrackButton = ElementReference | ElementReference1 | VariableReference;
/**
 * The name of the sound.
 */
export type SoundName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The pitch of the sound.
 */
export type SoundPitch = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The volume of the sound.
 */
export type SoundVolume = number | C;
/**
 * The alignment of the text.
 */
export type TextAlignment = ("left" | "center" | "right") | Variable;
/**
 * The name of the text box.
 */
export type TextBoxName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The control that will be used for the text.
 */
export type TextControl = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the collection that the text edit box grid is in.
 */
export type TextEditBoxGridCollectionName =
  | string
  | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The labels of the text.
 */
export type TextLabels = TextLabel[] | C;
export type TextLabel = string;
/**
 * The type of the text.
 */
export type TextType = "ExtendedASCII" | Variable;
/**
 * The text to display.
 */
export type Text = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The file system that the texture is in.
 */
export type TextureFileSystem = "RawPath" | Variable;
/**
 * The texture to display.
 */
export type Texture = string | C;
/**
 * If true, the texture will be tiled.
 */
export type Tiled = boolean | ("x" | "y") | C;
/**
 * The default state of the toggle.
 */
export type ToggleDefaultState = ("checked" | "unchecked") | C;
/**
 * The name of the collection that the toggle grid is in.
 */
export type ToggleGridCollectionName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The default selected toggle of the toggle group.
 */
export type ToggleGroupDefaultSelected = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The forced index of the toggle group.
 */
export type ToggleGroupForcedIndex = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the toggle.
 */
export type ToggleName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button that will toggle the element.
 */
export type ToggleOffButton = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The button that will toggle the element.
 */
export type ToggleOnButton = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The touch mode of the element.
 */
export type TouchMode = ("touch" | "mouse") | C;
/**
 * The header of the TTS control.
 */
export type TTSControlHeader = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The priority of the TTS control type order.
 */
export type TTSControlTypeOrderPriority =
  | number
  | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The number of TTS ignores.
 */
export type TTSIgnoreCount = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will ignore subsections.
 */
export type TTSIgnoreSubsections = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The priority of the TTS index.
 */
export type TTSIndexPriority = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will inherit its siblings.
 */
export type TTSInheritSiblings = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The name of the TTS.
 */
export type TTSName = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the TTS will override the control value.
 */
export type TTSOverrideControlValue = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The header of the TTS section.
 */
export type TTSSectionHeader = string | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the TTS will toggle off.
 */
export type TTSToggleOff = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the TTS will toggle on.
 */
export type TTSToggleOn = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the TTS value will change.
 */
export type TTSValueChanged = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The priority of the TTS value order.
 */
export type TTSValueOrderPriority = number | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The TTS section container.
 */
export type TTSSectionContainer = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The type of the element
 */
export type Type1 =
  | "always_rotate"
  | "button"
  | "carousel_label"
  | "custom"
  | "dropdown"
  | "edit_box"
  | "grid"
  | "image_cycler"
  | "image"
  | "input_panel"
  | "label_cycler"
  | "label"
  | "panel"
  | "screen"
  | "scroll_track"
  | "scroll_view"
  | "scrollbar_box"
  | "slider_box"
  | "slider"
  | "stack_panel"
  | "toggle";
/**
 * The control that will be unchecked.
 */
export type UncheckedControl = "unchecked" | C;
/**
 * The control that will be unchecked when hovered.
 */
export type UncheckedHoverControl = "unchecked" | C;
/**
 * The control that will be unchecked when locked.
 */
export type UncheckedLockedControl = "unchecked" | C;
/**
 * The control that will be unchecked when locked and hovered.
 */
export type UncheckedLockedHoverControl = "unchecked" | C;
/**
 * If true, the element will use the anchored offset.
 */
export type UseAnchoredOffset = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, this element will stack its controlled element in respect to their anchor values.
 */
export type UseChildAnchors = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will use the last focus.
 */
export type UseLastFocus = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The variables that are contained within this element.
 */
export type Variables = C | Variables1[] | Variables2;
/**
 * The control that will be used for the virtual keyboard buffer.
 */
export type VirtualKeyboardBufferControl =
  | string
  | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * If true, the element will be visible.
 */
export type Visible = boolean | ((ElementReference | ElementReference1 | VariableReference) & string);
/**
 * The folder that the element will be zipped into.
 */
export type ZipFolder = string | ((ElementReference | ElementReference1 | VariableReference) & string);

export interface MinecraftJSONUI {
  namespace?: Namespace;
  [k: string]: UIDefinition;
}
/**
 * An element is a control that can be added to a screen. It can be a button, a label, an image, etc.
 */
export interface Element {
  controls?: Controls;
  modifications?: Modifications;
  allow_clipping?: AllowClipping;
  allow_debug_missing_texture?: AllowDebugMissingTexture;
  allow_scroll_even_when_content_fits?: AllowScrollEvenWhenContentFits;
  alpha?: Alpha;
  always_handle_pointer?: AlwaysHandlePointer;
  always_handle_scrolling?: AlwaysHandleScrolling;
  always_listen_to_input?: AlwaysListenToInput;
  always_rotate?: AlwaysRotate;
  anchor_from?: AnchorFrom;
  anchor_to?: AnchorTo;
  anims?: Animations;
  background_control?: BackgroundControl;
  background_hover_control?: BackgroundHoverControl;
  backup_font_type?: BackupFontType;
  bilinear?: Bilinear;
  bindings?: Bindings;
  button_mappings?: ButtonMappings;
  cache_screen?: CacheScreen;
  checked_control?: CheckedControl;
  checked_hover_control?: CheckedHoverControl;
  checked_locked_control?: CheckedLockedControl;
  checked_locked_hover_control?: CheckedLockedHoverControl;
  clip_direction?: ClipDirection;
  clip_pixelperfect?: ClipPixelPerfect;
  clips_children?: ClipsChildren;
  close_on_player_hurt?: CloseOnPlayerHurt;
  collection_index?: CollectionIndex;
  collection_name?: CollectionName;
  color?: Color;
  consume_hover_events?: ConsumeHoverEvents;
  contained?: Contained;
  control_name?: ControlName;
  default_control?: DefaultControl;
  default_focus_precedence?: DefaultFocusPrecedence;
  disable_anim_fast_forward?: DisableAnimFastForward;
  draggable?: Draggable;
  dropdown_area?: DropdownArea;
  dropdown_content_control?: DropdownContentControl;
  dropdown_name?: DropdownName;
  enable_directional_toggling?: EnableDirectionalToggling;
  enable_profanity_filter?: EnableProfanityFilter;
  enabled_newline?: EnabledNewline;
  enabled?: Enabled;
  factory?: Factory;
  fill?: Fill;
  focus_change_down?: FocusChangeDown;
  focus_change_left?: FocusChangeLeft;
  focus_change_right?: FocusChangeRight;
  focus_change_up?: FocusChangeUp;
  focus_container?: FocusContainer;
  focus_enabled?: FocusEnabled;
  focus_identifier?: FocusIdentifier;
  focus_magnet_enabled?: FocusMagnetEnabled;
  focus_navigation_mode_down?: FocusNavigationModeDown;
  focus_navigation_mode_left?: FocusNavigationModeLeft;
  focus_navigation_mode_right?: FocusNavigationModeRight;
  focus_navigation_mode_up?: FocusNavigationModeUp;
  focus_wrap_enabled?: FocusWrapEnabled;
  font_scale_factor?: FontScaleFactor;
  font_size?: FontSize;
  font_type?: FontType;
  force_render_below?: ForceRenderBelow;
  force_texture_reload?: ForceTextureReload;
  grid_dimension_binding?: GridDimensionBinding;
  grid_dimensions?: GridDimensions;
  grid_item_template?: GridItemTemplate;
  grid_position?: GridPosition;
  grid_rescaling_type?: GridRescalingType;
  handle_deselect?: HandleDeselect;
  handle_select?: HandleSelect;
  hide_hyphen?: HideHyphen;
  hover_alpha?: Alpha;
  hover_color?: Color;
  hover_control?: HoverControl;
  hover_enabled?: HoverEnabled;
  ignored?: Ignored1;
  images?: Images;
  indent_control?: IndentControl;
  inherit_max_sibling_height?: InheritMaxSiblingHeight;
  inherit_max_sibling_width?: InheritMaxSiblingWidth;
  is_modal?: IsModal;
  is_showing_menu?: IsShowingMenu;
  jump_to_bottom_on_update?: JumpToBottomOnUpdate;
  keep_ratio?: KeepRatio;
  layer?: Layer;
  localize?: Localize;
  locked_alpha?: Alpha;
  locked_color?: Color;
  locked_control?: LockedControl;
  low_frequency_rendering?: LowFrequencyRendering;
  max_length?: MaxLength;
  max_size?: MaxSize;
  maximum_grid_items?: MaximumGridItems;
  min_size?: MinSize;
  modal?: Modal;
  offset?: Offset;
  orientation?: Orientation;
  place_holder_control?: PlaceHolderControl;
  pressed_alpha?: Alpha;
  pressed_color?: Color;
  pressed_control?: PressedControl;
  prevent_touch_input?: PreventTouchInput;
  primary_color?: Color;
  progress_control?: ProgressControl;
  progress_hover_control?: ProgressHoverControl;
  propagate_alpha?: PropagateAlpha;
  property_bag?: PropertyBag;
  radio_toggle_group?: RadioToggleGroup;
  render_game_behind?: RenderGameBehind;
  render_only_when_topmost?: RenderOnlyWhenTopmost;
  renderer?: Renderer;
  reset_event?: ResetEvent;
  reset_on_focus_lost?: ResetOnFocusLost;
  rotate_speed?: RotateSpeed;
  screen_draws_last?: ScreenDrawsLast;
  screen_not_flushable?: ScreenNotFlushable;
  scroll_box_and_track_panel?: ScrollBoxAndTrackPanel;
  scroll_content?: ScrollContent;
  scroll_speed?: ScrollSpeed;
  scroll_view_port?: ScrollViewPort;
  scrollbar_box?: ScrollbarBox;
  scrollbar_touch_button?: ScrollbarTouchButton;
  scrollbar_track_button?: ScrollbarTrackButton;
  scrollbar_track?: ScrollbarTrack;
  send_telemetry?: SendTelemetry;
  shadow?: Shadow;
  should_steal_mouse?: ShouldStealMouse;
  size?: Size;
  slider_box_control?: SliderBoxControl;
  slider_collection_name?: SliderCollectionName;
  slider_deselected_button?: SliderDeselectedButton;
  slider_direction?: SliderDirection;
  slider_name?: SliderName;
  slider_select_on_hover?: SliderSelectOnHover;
  slider_selected_button?: SliderSelectedButton;
  slider_small_decrease_button?: SliderSmallDecreaseButton;
  slider_small_increase_button?: SliderSmallIncreaseButton;
  slider_steps?: SliderSteps;
  slider_track_button?: SliderTrackButton;
  sound_name?: SoundName;
  sound_pitch?: SoundPitch;
  sound_volume?: SoundVolume;
  text_alignment?: TextAlignment;
  text_box_name?: TextBoxName;
  text_control?: TextControl;
  text_edit_box_grid_collection_name?: TextEditBoxGridCollectionName;
  text_labels?: TextLabels;
  text_type?: TextType;
  text?: Text;
  texture_file_system?: TextureFileSystem;
  texture?: Texture;
  tiled?: Tiled;
  toggle_default_state?: ToggleDefaultState;
  toggle_grid_collection_name?: ToggleGridCollectionName;
  toggle_group_default_selected?: ToggleGroupDefaultSelected;
  toggle_group_forced_index?: ToggleGroupForcedIndex;
  toggle_name?: ToggleName;
  toggle_off_button?: ToggleOffButton;
  toggle_on_button?: ToggleOnButton;
  touch_mode?: TouchMode;
  tts_control_header?: TTSControlHeader;
  tts_control_type_order_priority?: TTSControlTypeOrderPriority;
  tts_ignore_count?: TTSIgnoreCount;
  tts_ignore_subsections?: TTSIgnoreSubsections;
  tts_index_priority?: TTSIndexPriority;
  tts_inherit_siblings?: TTSInheritSiblings;
  tts_name?: TTSName;
  tts_override_control_value?: TTSOverrideControlValue;
  tts_section_header?: TTSSectionHeader;
  tts_toggle_off?: TTSToggleOff;
  tts_toggle_on?: TTSToggleOn;
  tts_value_changed?: TTSValueChanged;
  tts_value_order_priority?: TTSValueOrderPriority;
  ttsSectionContainer?: TTSSectionContainer;
  type?: Type1;
  unchecked_control?: UncheckedControl;
  unchecked_hover_control?: UncheckedHoverControl;
  unchecked_locked_control?: UncheckedLockedControl;
  unchecked_locked_hover_control?: UncheckedLockedHoverControl;
  use_anchored_offset?: UseAnchoredOffset;
  use_child_anchors?: UseChildAnchors;
  use_last_focus?: UseLastFocus;
  uv_size?: UVSize;
  uv?: UV;
  variables?: Variables;
  virtual_keyboard_buffer_control?: VirtualKeyboardBufferControl;
  visible?: Visible;
  zip_folder?: ZipFolder;
  [k: string]: VariableDefinition;
}
/**
 * An animation is a set of keyframes that can be applied to an element.
 */
export interface Animation {
  anim_type: AnimationType;
  animation_reset_name?: AnimationResetName;
  destroy_at_end?: DestroyAtEnd;
  disable_anim_fast_forward?: DisableAnimFastForward;
  duration?: Duration;
  easing?: Easing;
  end_event?: EndEvent;
  fps?: FPS;
  frame_count?: FrameCount;
  frame_step?: FrameStep;
  from?: From;
  initial_uv?: InitialUV;
  next?: Next;
  play_event?: PlayEvent;
  propagate_alpha?: PropagateAlpha;
  reversible?: Reversible;
  scale_from_starting_alpha?: ScaleFromStartingAlpha;
  to?: To;
  uv?: UV;
  uv_size?: UVSize;
  [k: string]: VariableDefinition;
}
/**
 * A variable is a reference to a value that can be used in the UI.
 *
 * This interface was referenced by `Animation`'s JSON-Schema definition
 * via the `patternProperty` "^\$.*".
 *
 * This interface was referenced by `ControlFactory`'s JSON-Schema definition
 * via the `patternProperty` "^\$.*".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^\$.*".
 *
 * This interface was referenced by `Element`'s JSON-Schema definition
 * via the `patternProperty` "^\$.*".
 */
export interface VariableDefinition {
  [k: string]: unknown;
}
export interface ControlFactory {
  type?: Type;
  control_ids?: ControlIDs;
  control_name?: ControlName;
  [k: string]: VariableDefinition;
}
export interface Bindings1 {
  binding_collection_name?: BindingCollectionName;
  binding_collection_prefix?: BindingCollectionPrefix;
  binding_condition?: BindingCondition;
  binding_name?: BindingName;
  binding_name_override?: BindingNameOverride;
  binding_type?: BindingType;
  ignored?: Ignored;
  resolve_sibling_scope?: ResolveSiblingScope;
  source_control_name?: SourceControlName;
  source_property_name?: SourcePropertyName;
  target_property_name?: TargetPropertyName;
}
export interface ButtonMappings1 {
  [k: string]: ButtonMapping;
}
export interface Variables1 {
  [k: string]: VariableDefinition1;
}
/**
 * A variable is a reference to a value that can be used in the UI.
 */
export interface VariableDefinition1 {
  [k: string]: unknown;
}
export interface Variables2 {
  [k: string]: VariableDefinition1;
}
