/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A version that tells minecraft what type of data format can be expected when reading this file.
 */
export type FormatVersion = string;
/**
 * The identifier for this block. The name must include a namespace and must not use the Minecraft namespace unless overriding a Vanilla block.
 */
export type Identifier = string;
/**
 * Determines which category this block/item will be placed under in the inventory and crafting table container screens.
 */
export type Category = "construction" | "equipment" | "items" | "nature" | "none";
/**
 * A translation string of an existing group in minecraft to group this block/item under
 */
export type ItemGroup =
  | "itemGroup.name.anvil"
  | "itemGroup.name.arrow"
  | "itemGroup.name.axe"
  | "itemGroup.name.banner"
  | "itemGroup.name.banner_pattern"
  | "itemGroup.name.bed"
  | "itemGroup.name.boat"
  | "itemGroup.name.boots"
  | "itemGroup.name.buttons"
  | "itemGroup.name.candles"
  | "itemGroup.name.chalkboard"
  | "itemGroup.name.chest"
  | "itemGroup.name.chestboat"
  | "itemGroup.name.chestplate"
  | "itemGroup.name.concrete"
  | "itemGroup.name.concretePowder"
  | "itemGroup.name.cookedFood"
  | "itemGroup.name.copper"
  | "itemGroup.name.coral"
  | "itemGroup.name.coral_decorations"
  | "itemGroup.name.crop"
  | "itemGroup.name.door"
  | "itemGroup.name.dye"
  | "itemGroup.name.enchantedBook"
  | "itemGroup.name.fence"
  | "itemGroup.name.fenceGate"
  | "itemGroup.name.firework"
  | "itemGroup.name.fireworkStars"
  | "itemGroup.name.flower"
  | "itemGroup.name.glass"
  | "itemGroup.name.glassPane"
  | "itemGroup.name.glazedTerracotta"
  | "itemGroup.name.goatHorn"
  | "itemGroup.name.grass"
  | "itemGroup.name.hanging_sign"
  | "itemGroup.name.helmet"
  | "itemGroup.name.hoe"
  | "itemGroup.name.horseArmor"
  | "itemGroup.name.leaves"
  | "itemGroup.name.leggings"
  | "itemGroup.name.lingeringPotion"
  | "itemGroup.name.log"
  | "itemGroup.name.minecart"
  | "itemGroup.name.miscFood"
  | "itemGroup.name.mobEgg"
  | "itemGroup.name.monsterStoneEgg"
  | "itemGroup.name.mushroom"
  | "itemGroup.name.netherWartBlock"
  | "itemGroup.name.ore"
  | "itemGroup.name.permission"
  | "itemGroup.name.pickaxe"
  | "itemGroup.name.planks"
  | "itemGroup.name.potion"
  | "itemGroup.name.potterySherds"
  | "itemGroup.name.pressurePlate"
  | "itemGroup.name.rail"
  | "itemGroup.name.rawFood"
  | "itemGroup.name.record"
  | "itemGroup.name.sandstone"
  | "itemGroup.name.sapling"
  | "itemGroup.name.sculk"
  | "itemGroup.name.seed"
  | "itemGroup.name.shovel"
  | "itemGroup.name.shulkerBox"
  | "itemGroup.name.sign"
  | "itemGroup.name.skull"
  | "itemGroup.name.slab"
  | "itemGroup.name.smithing_templates"
  | "itemGroup.name.splashPotion"
  | "itemGroup.name.stainedClay"
  | "itemGroup.name.stairs"
  | "itemGroup.name.stone"
  | "itemGroup.name.stoneBrick"
  | "itemGroup.name.sword"
  | "itemGroup.name.trapdoor"
  | "itemGroup.name.walls"
  | "itemGroup.name.wood"
  | "itemGroup.name.wool"
  | "itemGroup.name.woolCarpet";
/**
 * Determines whether or not this item can be used with commands such as /give and /setblock. Commands can use blocks by default
 */
export type IsHiddenInCommands = boolean;
/**
 * The key defines the name of a state, which must be properly namespaced. Each value is an array that contains all of the possible values of that state or an object defining a range of integers.
 */
export type State = BlockceptionMinecraftBehaviorBlockStatesEnum | BlockceptionMinecraftBehaviorBlockStatesIntegerRange;
/**
 * @minItems 1
 * @maxItems 16
 */
export type BlockceptionMinecraftBehaviorBlockStatesEnum =
  | ((BooleanStateValue[] | IntegerStateValue[] | StringStateValue[]) &
      [
        {
          [k: string]: unknown;
        }
      ])
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ]
  | [
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      },
      {
        [k: string]: unknown;
      }
    ];
export type BooleanStateValue = boolean;
export type IntegerStateValue = number;
export type StringStateValue = string;
/**
 * The lowest integer this state supports. This is also used as the default state value.
 */
export type Minimum = number;
/**
 * The highest integer this state supports. This cannot be more than 15 above the minimum.
 */
export type Maximum = number;
/**
 * Block states you wish to enable
 *
 * @minItems 1
 */
export type EnabledStates = [
  "minecraft:cardinal_direction" | "minecraft:facing_direction",
  ...("minecraft:cardinal_direction" | "minecraft:facing_direction")[]
];
/**
 * This rotation offset only applies to the horizontal state values
 */
export type YRotationOffset = number;
/**
 * Block states you wish to enable
 *
 * @minItems 1
 * @maxItems 2
 */
export type EnabledStates1 =
  | ["minecraft:block_face" | "minecraft:vertical_half"]
  | ["minecraft:block_face" | "minecraft:vertical_half", "minecraft:block_face" | "minecraft:vertical_half"];
/**
 * This component can be specified as a Boolean. If this component is omitted, the default value for this component is true, which will give your block the default values for its parameters (a collision box the size/shape of a regular block).
 */
export type CollisionBox =
  | boolean
  | {
      origin?: Origin;
      size?: Size;
    };
/**
 * Minimal position of the bounds of the collision box. origin is specified as [x, y, z] and must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
 */
export type Origin = [] | [X] | [X, Y] | [X, Y, Z];
export type X = number;
export type Y = number;
export type Z = number;
/**
 * Size of each side of the collision box. Size is specified as [x, y, z]. origin + size must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
 */
export type Size = [] | [X1] | [X1, Y1] | [X1, Y1, Z1];
export type X1 = number;
export type Y1 = number;
export type Z1 = number;
/**
 * The tag to check for.
 */
export type Tag = string;
/**
 * Defines the tags recipes should define to be crafted on this table. Limited to 64 tags. Each tag is limited to 64 characters.
 *
 * @maxItems 64
 */
export type CraftingTags = Tag[];
/**
 * Specifies the language file key that maps to what text will be displayed in the UI of this table. If the string given can not be resolved as a loc string, the raw string given will be displayed. If this field is omitted, the name displayed will default to the name specified in the "display_name" component. If this block has no "display_name" component, the name displayed will default to the name of the block.
 */
export type TableName = string;
/**
 * Describes the destructible by explosion properties for this block. If set to true, the block will have the default explosion resistance. If set to false, this block is indestructible by explosion. If the component is omitted, the block will have the default explosion resistance.
 */
export type DestructibleByExplosion =
  | boolean
  | {
      explosion_resistance?: ExplosionResistance;
    };
/**
 * Describes how resistant the block is to explosion. Greater values mean the block is less likely to break when near an explosion (or has higher resistance to explosions). The scale will be different for different explosion power levels. A negative value or 0 means it will easily explode; larger numbers increase level of resistance.
 */
export type ExplosionResistance = number;
/**
 * Describes the destructible by mining properties for this block. If set to true, the block will take the default number of seconds to destroy. If set to false, this block is indestructible by mining. If the component is omitted, the block will take the default number of seconds to destroy.
 */
export type DestructibleByMining =
  | boolean
  | {
      seconds_to_destroy?: SecondsToDestroy;
      item_specific_speeds?: ItemSpecificDestroySpeeds;
    };
/**
 * Sets the number of seconds it takes to destroy the block with base equipment. Greater numbers result in greater mining times.
 */
export type SecondsToDestroy = number;
/**
 * Optional array of objects to describe item-specific block destroy speeds.
 *
 * @minItems 1
 */
export type ItemSpecificDestroySpeeds = [ItemSpecificDestroySpeed, ...ItemSpecificDestroySpeed[]];
/**
 * ItemDescriptor filtering for the item used while mining.
 */
export type ItemIdentifer = string;
/**
 * Molang or tag
 */
export type Tags = string;
/**
 * Sets the number of seconds it takes to destroy the block with base equipment. Greater numbers result in greater mining times.
 */
export type DestroySpeed = number;
/**
 * Specifies the language file key that maps to what text will be displayed when you hover over the block in your inventory and hotbar. If the string given can not be resolved as a loc string, the raw string given will be displayed. If this component is omitted, the name of the block will be used as the display name.
 */
export type DisplayName = string;
/**
 * Describes the flammable properties for this block. If set to true, default values are used. If set to false, or if this component is omitted, the block will not be able to catch on fire naturally from neighbors, but it can still be directly ignited.
 */
export type Flammable =
  | boolean
  | {
      catch_chance_modifier?: CatchChanceModifier;
      destroy_chance_modifier?: DestroyChanceModifier;
    };
/**
 * A modifier affecting the chance that this block will catch flame when next to a fire. Values are greater than or equal to 0, with a higher number meaning more likely to catch on fire
 */
export type CatchChanceModifier = number;
/**
 * A modifier affecting the chance that this block will be destroyed by flames when on fire.
 */
export type DestroyChanceModifier = number;
/**
 * Describes the friction for this block in a range of (0.0-0.9). Friction affects an entity's movement speed when it travels on the block. Greater value results in more friction.
 */
export type Friction = number;
/**
 * The description identifier of the geometry file to use to render this block. This identifier must match an existing geometry identifier in any of the currently loaded resource packs.
 */
export type Geometry =
  | string
  | {
      identifier: Identifier1;
      bone_visibility?: BoneVisibility;
      culling?: BlockCullingRule;
    };
/**
 * The description identifier of the geometry file to use to render this block. This identifier must match an existing geometry identifier in any of the currently loaded resource packs.
 */
export type Identifier1 = string;
/**
 * Whether or not the bone should be visible. Can be defined as a boolean or a molang expression resulting in a boolean.
 */
export type BoneVisibility1 = boolean | string;
/**
 * The description identifer of the block culling rule used to cull this block. This identifier must match an existing geometry identifier in any of the currently loaded resource packs.
 */
export type BlockCullingRule = string;
/**
 * The description identifier of the geometry file to use to render this block. This identifier must match an existing geometry identifier in any of the currently loaded resource packs.
 */
export type Geometry1 =
  | string
  | {
      identifier: Identifier1;
      bone_visibility?: BoneVisibility;
      culling?: BlockCullingRule;
    };
/**
 * The material instance for a block. Maps face or material_instance names in a geometry file to an actual material instance. You can assign a material instance object to any of these faces: "up", "down", "north", "south", "east", "west", or "*". You can also give an instance the name of your choosing such as "my_instance", and then assign it to a face by doing "north":"my_instance".
 */
export type MaterialInstance =
  | string
  | {
      ambient_occlusion?: AmbientOcclusion;
      face_dimming?: FaceDimming;
      render_method?: RenderMethod;
      texture?: Texture;
    };
/**
 * Should this material have ambient occlusion applied when lighting? If true, shadows will be created around and underneath the block.
 */
export type AmbientOcclusion = boolean | number;
/**
 * Should this material be dimmed by the direction it's facing?
 */
export type FaceDimming = boolean;
/**
 * The render method to use. Must be one of these options: opaque - Used for a regular block texture without an alpha layer. Does not allow for transparency or translucency. double_sided - Used for completely disabling backface culling. blend - Used for a block like stained glass. Allows for transparency and translucency (slightly transparent textures). alpha_test - Used for a block like the vanilla (unstained) glass. Does not allow for translucency, only fully opaque or fully transparent textures. Also disables backface culling.
 */
export type RenderMethod = "opaque" | "double_sided" | "blend" | "alpha_test" | "alpha_test_single_sided";
/**
 * Texture name for the material.
 */
export type Texture = string;
/**
 * The amount that light will be dampened when it passes through the block, in a range (0-15). Higher value means the light will be dampened more.
 */
export type LightDampening = number;
/**
 * The amount of light this block will emit in a range (0-15). Higher value means more light will be emitted.
 */
export type LightEmission = number;
/**
 * Whether this block can contain the liquid. For example, if the liquid type is water, this means the block can be waterlogged.
 */
export type CanContainLiquid = boolean;
/**
 * The type of liquid this detection rule is for.
 */
export type LiquidType = "water";
/**
 * How the block reacts to flowing water. Must be one of the following options:
 * "blocking" - The default value for this field. The block stops the liquid from flowing.
 * "broken" - The block is destroyed completely.
 * "popped" - The block is destroyed and its item is spawned.
 * "no_reaction" - The block is unaffected; visually, the liquid will flow through the block.
 */
export type OnLiquidTouches = "blocking" | "broken" | "popped" | "no_reaction";
/**
 * When a block contains a liquid, controls the directions in which the liquid can't flow out from the block. Also controls the directions in which a block can stop liquid flowing into it if no_reaction is set for the on_liquid_touches field. The default is an empty list; this means that liquid can flow out of all directions by default.
 */
export type StopsLiquidFlowingFromDirection = ("up" | "down" | "north" | "south" | "east" | "west" | "side" | "all")[];
/**
 * The path to the loot table, relative to the behavior pack.
 */
export type Loot = string;
/**
 * Sets the color of the block when rendered to a map. The color is represented as a hex value in the format "#RRGGBB". May also be expressed as an array of [R, G, B] from 0 to 255. If this component is omitted, the block will not show up on the map.
 */
export type MapColor = string | [] | [Red] | [Red, Green] | [Red, Green, Blue];
export type Red = number;
export type Green = number;
export type Blue = number;
/**
 * List of conditions where the block can be placed/survive. Limited to 64 conditions. Each condition is a JSON Object that must contain at least one (and can contain both) of the parameters allowed_faces or block_filter as shown below.
 *
 * @minItems 1
 */
export type Conditions = [PlacementFilter1, ...PlacementFilter1[]];
/**
 * List of any of the following strings describing which face(s) this block can be placed on: "up", "down", "north", "south", "east", "west", "side", "all". Limited to 6 faces.
 */
export type AllowedFaces = ("up" | "down" | "north" | "south" | "east" | "west" | "side" | "all")[];
/**
 * [Experimental]
 */
export type BlockFilter1 = BlockIdentifier | BlockReference;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier = string;
/**
 * A minecraft block identifier.
 */
export type BlockIdentifier1 = string;
/**
 * The key of property is the name of the block state/property, the value must be the same as the block properties accepted values.
 */
export type StateValue = boolean | number | string;
/**
 * A condition using Molang queries that results to true/false that can be used to query for blocks with certain tags.
 */
export type Molang = string;
/**
 * List of blocks that this block can be placed against in the "allowed_faces" direction. Limited to 64 blocks. Each block in this list can either be specified as a String (block name) or as a BlockDescriptor. A BlockDescriptor is an object that allows you to reference a block (or multiple blocks) based on its tags, or based on its name and states. The fields of a BlockDescriptor are described below.
 */
export type BlockFilter = BlockFilter1[];
/**
 * Specifies if redstone wire can stair-step downward on the block.
 */
export type AllowsWireToStepDown = boolean;
/**
 * Specifies if the block can be powered by redstone.
 */
export type RedstoneConductor = boolean;
/**
 * Defines the area of the block that is selected by the player's cursor. If set to true, default values are used. If set to false, this block is not selectable by the player's cursor. If this component is omitted, default values are used.
 */
export type SelectionBox =
  | boolean
  | {
      origin?: Origin1;
      size?: Size1;
    };
/**
 * Minimal position of the bounds of the selection box. "origin" is specified as [x, y, z] and must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
 */
export type Origin1 = [] | [X2] | [X2, Y2] | [X2, Y2, Z2];
export type X2 = number;
export type Y2 = number;
export type Z2 = number;
/**
 * Size of each side of the selection box. Size is specified as [x, y, z]. "origin" + "size" must be in the range (-8, 0, -8) to (8, 16, 8), inclusive.
 */
export type Size1 = [] | [X3] | [X3, Y3] | [X3, Y3, Z3];
export type X3 = number;
export type Y3 = number;
export type Z3 = number;
/**
 * Amount in degrees the block should be rotated on each axis. "rotation" is specified as [x, y, z] using floating point values and must be axis aligned, otherwise the value will be rounded to the nearest axis-aligned value.
 */
export type Rotation = [] | [X4] | [X4, Y4] | [X4, Y4, Z4];
export type X4 = number;
export type Y4 = number;
export type Z4 = number;
/**
 * Amount the block should be scaled along each axis. "scale" is specified as [x, y, z] using floating point values.
 */
export type Scale = [] | [X5] | [X5, Y5] | [X5, Y5, Z5];
export type X5 = number;
export type Y5 = number;
export type Z5 = number;
/**
 * Amount the block should be translated along each axis. "translation" is specified as [x, y, z] using floating point values.
 */
export type Translation = [] | [X6] | [X6, Y6] | [X6, Y6, Z6];
export type X6 = number;
export type Y6 = number;
export type Z6 = number;
/**
 * Offset to the pivot point around which to apply the scale. "scale_pivot" is specified as [x, y, z] using floating point values.
 */
export type ScalePivot = [] | [X7] | [X7, Y7] | [X7, Y7, Z7];
export type X7 = number;
export type Y7 = number;
export type Z7 = number;
/**
 * Offset to the pivot point around which to apply the rotation. "rotation_pivot" is specified as [x, y, z] using floating point values.
 */
export type RotationPivot = [] | [X8] | [X8, Y8] | [X8, Y8, Z8];
export type X8 = number;
export type Y8 = number;
export type Z8 = number;
/**
 * Used to register custom components.
 */
export type CustomComponents = string[];
/**
 * Does the event loop.
 */
export type Looping = boolean;
/**
 * The Range between which the component will trigger his event.
 */
export type IntervalRange = unknown[];
/**
 * Sets the minimum fall distance required to trigger the custom component.
 */
export type MinFallDistance = number;
/**
 * A Molang expression that evaluates to true or false to determine if this permutation should be used. For permutation conditions you are limited to using one Molang query: "query.block_state()"
 */
export type Condition = string | boolean;
/**
 * UNDOCUMENTED.
 */
export type Permutations = Permutation[];

/**
 * The minecraft block behavior specification.
 */
export interface BlockBehavior {
  format_version: FormatVersion;
  "minecraft:block": BlockDefinitions;
}
/**
 * A custom block definition.
 */
export interface BlockDefinitions {
  description: BlockDescription;
  components: Component;
  permutations?: Permutations;
}
/**
 * The description for this block.
 */
export interface BlockDescription {
  identifier: Identifier;
  menu_category?: MenuCategory;
  states?: States;
  traits?: Traits;
}
/**
 * Specifies the menu category and group for the block, which determine where this block is placed in the inventory and crafting table container screens. If this field is omitted, the block will not appear in the inventory or crafting table container screens.
 */
export interface MenuCategory {
  category: Category;
  group?: ItemGroup;
  is_hidden_in_commands?: IsHiddenInCommands;
}
/**
 * Block states are variables that can be set to different values in order to change how your block looks or behaves.
 */
export interface States {
  [k: string]: State;
}
export interface BlockceptionMinecraftBehaviorBlockStatesIntegerRange {
  values: StateIntegerValueRange;
}
export interface StateIntegerValueRange {
  min: Minimum;
  max: Maximum;
}
/**
 * A shortcut for creators to use Vanilla block states without needing to define and manage a series of events or triggers on custom blocks
 */
export interface Traits {
  "minecraft:placement_direction"?: PlacementDirection;
  "minecraft:placement_position"?: PlacementPosition;
}
/**
 * Contains information about the player's rotation when the block was placed.
 */
export interface PlacementDirection {
  enabled_states: EnabledStates;
  y_rotation_offset?: YRotationOffset;
}
/**
 * Contains information about where the player placed the block.
 */
export interface PlacementPosition {
  enabled_states: EnabledStates1;
}
/**
 * UNDOCUMENTED.
 */
export interface Component {
  "minecraft:collision_box"?: CollisionBox;
  "minecraft:crafting_table"?: CraftingTable;
  "minecraft:destructible_by_explosion"?: DestructibleByExplosion;
  "minecraft:destructible_by_mining"?: DestructibleByMining;
  "minecraft:display_name"?: DisplayName;
  "minecraft:flammable"?: Flammable;
  "minecraft:friction"?: Friction;
  "minecraft:geometry"?: Geometry;
  "minecraft:item_visual"?: ItemVisual;
  "minecraft:light_dampening"?: LightDampening;
  "minecraft:light_emission"?: LightEmission;
  "minecraft:liquid_detection"?: LiquidDetection;
  "minecraft:loot"?: Loot;
  "minecraft:map_color"?: MapColor;
  "minecraft:material_instances"?: MaterialInstances;
  "minecraft:placement_filter"?: PlacementFilter;
  "minecraft:redstone_conductivity"?: RedstoneConductivity;
  "minecraft:selection_box"?: SelectionBox;
  "minecraft:transformation"?: Transformation;
  "minecraft:custom_components"?: CustomComponents;
  "minecraft:tick"?: Tick;
  "minecraft:entity_fall_on"?: EntityFallOn;
  "tag:minecraft:diamond_tier_destructible"?: unknown;
  "tag:minecraft:iron_tier_destructible"?: unknown;
  "tag:minecraft:is_axe_item_destructible"?: unknown;
  "tag:minecraft:is_hoe_item_destructible"?: unknown;
  "tag:minecraft:is_mace_item_destructible"?: unknown;
  "tag:minecraft:is_pickaxe_item_destructible"?: unknown;
  "tag:minecraft:is_shears_item_destructible"?: unknown;
  "tag:minecraft:is_shovel_item_destructible"?: unknown;
  "tag:minecraft:is_sword_item_destructible"?: unknown;
  "tag:minecraft:netherite_tier_destructible"?: unknown;
  "tag:minecraft:stone_tier_destructible"?: unknown;
  [k: string]: Tag1;
}
/**
 * Makes your block into a custom crafting table which enables the crafting table UI and the ability to craft recipes.
 */
export interface CraftingTable {
  crafting_tags?: CraftingTags;
  table_name?: TableName;
}
export interface ItemSpecificDestroySpeed {
  item:
    | ItemIdentifer
    | {
        tags?: Tags;
      };
  destroy_speed: DestroySpeed;
}
/**
 * A list of bones that should be visible when rendering this block. If not specified, all bones will be visible.
 */
export interface BoneVisibility {
  [k: string]: BoneVisibility1;
}
/**
 * The description identifier of the geometry and material used to render the item of this block.
 * Experimental toggles required: Upcoming Creator Features
 */
export interface ItemVisual {
  geometry: Geometry1;
  material_instances: Geometry2;
}
/**
 * The "minecraft:material_instances" component that will be used for the item.
 */
export interface Geometry2 {
  [k: string]: MaterialInstance;
}
/**
 * The definitions for how a block behaves when detecting liquid. Only one rule definition is allowed per liquid type - if multiple are specified, the first will be used and the rest will be ignored.
 * Experimental toggles required: Upcoming Creator Features
 */
export interface LiquidDetection {
  detection_rules?: DefinitionRule[];
}
/**
 * The definition rule that specifies the behavior for one liquid type.
 */
export interface DefinitionRule {
  can_contain_liquid?: CanContainLiquid;
  liquid_type?: LiquidType;
  on_liquid_touches?: OnLiquidTouches;
  stops_liquid_flowing_from_direction?: StopsLiquidFlowingFromDirection;
}
/**
 * The material instances for a block. Maps face or material_instance names in a geometry file to an actual material instance. You can assign a material instance object to any of these faces: "up", "down", "north", "south", "east", "west", or "*". You can also give an instance the name of your choosing such as "my_instance", and then assign it to a face by doing "north":"my_instance".
 */
export interface MaterialInstances {
  [k: string]: MaterialInstance;
}
export interface PlacementFilter {
  conditions?: Conditions;
  [k: string]: unknown;
}
export interface PlacementFilter1 {
  allowed_faces?: AllowedFaces;
  block_filter?: BlockFilter;
}
export interface BlockReference {
  name?: BlockIdentifier1;
  states?: States1;
  tags?: Molang;
}
export interface States1 {
  [k: string]: StateValue;
}
/**
 * The basic redstone properties of a block; if the component is not provided the default values are used.
 */
export interface RedstoneConductivity {
  allows_wire_to_step_down?: AllowsWireToStepDown;
  redstone_conductor?: RedstoneConductor;
}
/**
 * Supports rotation, scaling, and translation
 */
export interface Transformation {
  rotation?: Rotation;
  scale?: Scale;
  translation?: Translation;
  scale_pivot?: ScalePivot;
  rotation_pivot?: RotationPivot;
}
/**
 * Describes the component that will trigger an even at a regular interval between two values.
 */
export interface Tick {
  looping?: Looping;
  interval_range?: IntervalRange;
}
/**
 * Required component to use the custom component `onEntityFallOn`.
 */
export interface EntityFallOn {
  min_fall_distance?: MinFallDistance;
}
/**
 * Applies a tag to the block, using the key without the "tag:" prefix as the tag name.
 *
 * This interface was referenced by `Component`'s JSON-Schema definition
 * via the `patternProperty` "tag:.+".
 *
 * This interface was referenced by `Component1`'s JSON-Schema definition
 * via the `patternProperty` "tag:.+".
 */
export interface Tag1 {}
/**
 * UNDOCUMENTED.
 */
export interface Permutation {
  condition?: Condition;
  components?: Component1;
}
/**
 * UNDOCUMENTED.
 */
export interface Component1 {
  "minecraft:collision_box"?: CollisionBox;
  "minecraft:crafting_table"?: CraftingTable;
  "minecraft:destructible_by_explosion"?: DestructibleByExplosion;
  "minecraft:destructible_by_mining"?: DestructibleByMining;
  "minecraft:display_name"?: DisplayName;
  "minecraft:flammable"?: Flammable;
  "minecraft:friction"?: Friction;
  "minecraft:geometry"?: Geometry;
  "minecraft:item_visual"?: ItemVisual;
  "minecraft:light_dampening"?: LightDampening;
  "minecraft:light_emission"?: LightEmission;
  "minecraft:liquid_detection"?: LiquidDetection;
  "minecraft:loot"?: Loot;
  "minecraft:map_color"?: MapColor;
  "minecraft:material_instances"?: MaterialInstances;
  "minecraft:placement_filter"?: PlacementFilter;
  "minecraft:redstone_conductivity"?: RedstoneConductivity;
  "minecraft:selection_box"?: SelectionBox;
  "minecraft:transformation"?: Transformation;
  "minecraft:custom_components"?: CustomComponents;
  "minecraft:tick"?: Tick;
  "minecraft:entity_fall_on"?: EntityFallOn;
  "tag:minecraft:diamond_tier_destructible"?: unknown;
  "tag:minecraft:iron_tier_destructible"?: unknown;
  "tag:minecraft:is_axe_item_destructible"?: unknown;
  "tag:minecraft:is_hoe_item_destructible"?: unknown;
  "tag:minecraft:is_mace_item_destructible"?: unknown;
  "tag:minecraft:is_pickaxe_item_destructible"?: unknown;
  "tag:minecraft:is_shears_item_destructible"?: unknown;
  "tag:minecraft:is_shovel_item_destructible"?: unknown;
  "tag:minecraft:is_sword_item_destructible"?: unknown;
  "tag:minecraft:netherite_tier_destructible"?: unknown;
  "tag:minecraft:stone_tier_destructible"?: unknown;
  [k: string]: Tag1;
}
